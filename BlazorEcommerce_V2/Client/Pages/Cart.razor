    @page "/cart"
    @inject ICartService CartService
    @inject IOrderService OrderService
    @inject NavigationManager NavigationManager
    @inject IAuthService AuthService

    <PageTitle>Shopping Cart</PageTitle>

<div class="cart-container">
    
    <h3>Shopping Cart</h3>

    @if(cartProducts == null || cartProducts.Count == 0)
    {
        <span>@message</span>
    }

   @*  else if(orderPlaced)
    {
        <span>Thank you for your order !! You can check your oders <a href="orders">here</a>. </span>
    } *@
    else
    {
        <div class="outer-container"> 
            @foreach( var product in cartProducts)
            {
                <div class="inner-container">

                    <div class="image-wrapper">
                        <img src="@product.ImageUrl" alt="@product.Title" class="image" />
                    </div>

                    <div class="name">
                            <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                            <span>@product.ProductType</span><br/>
                            <input type="number" value="@product.Quantity"
                                @onchange="@( (ChangeEventArgs e) => UpdateQuantity(e,product))"
                                class="form-control input-quantity"
                                min="1"
                                />
                            <button class="btn-delete" @onclick="@(() =>
                            RemoveProductFromCart(product.ProductId,product.ProductTypeId) )">Delete</button>
                    </div>

                     <div class="cart-product-price">
                        $@(product.Price * product.Quantity)
                     </div>
                </div>
            }


            <div class="cart-footer">

                 <div>
                     Total (@cartProducts.Count): €@cartProducts.Sum(@product => @product.Price * product.Quantity)
                 </div>


                @if(isAuthenticated)
                {
                    <div>
                        <h5>Delivery Service</h5>
                        <AddressForm />
                        <p></p>
                    </div>
                }
                <button @onclick="PlaceOrder" class="btn alert-success">Checkout</button>
          
            </div>


        </div>


    } 
</div>

@code {
    public List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";
    bool isAuthenticated = false;
    //bool orderPlaced = false;

    //pq OnInitializedAsync e nao OnParametersSetAsync ?????
    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
        await AuthService.IsAuthenticated();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty ...";
        }

    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;

        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        //1. Cria order na tabela Order  2. Apaga os items do carrinho da tabela cartitem do banco de dados
        //await OrderService.PlaceOrder();
        //1. Carrinho continua mostrando items mesmo tendo sido apagado a tabela CartItems. Para evitar essa discrepancia, chamamos esse metodo para zerar o carrinho
        // await CartService.GetCartItemsCount();
        // orderPlaced = true;

        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }
 }
