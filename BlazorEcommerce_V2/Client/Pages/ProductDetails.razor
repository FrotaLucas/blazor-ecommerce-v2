@page "/product/{id:int}"
@inject IProductService ProductService;
@inject ICartService CartService;
@* antes estavamos usando ProductService pq estavamos pegando todos produtos e escolhendo apenas 1 *@
@* antes estavamos usando ProductService *@

@if (product == null)
{
    <span>@message</span>
}

else
{
    <h3>Product Details</h3>
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
        </div>
        <div class="media-body">

            <h2 class="mb-0">@product.Title</h2>

            <p>@product.Description</p>
            <div class="mb-3">
                @if (product.Variants != null && product.Variants.Count > 1)
                {
                    <select class="form-selected" @bind="currentTypeId">
                        @foreach (var item in product.Variants)
                        {
                            <option value="@item.ProductTypeId">@item.ProductType.Name</option>
                        }
                    </select>
                }

            </div>

            @if (GetSelectedVariant() != null)
            {
                @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        €@GetSelectedVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    €@GetSelectedVariant().Price
                </h4>
            }
            @* NAO EXECUTA usando @AddToCart() *@
            <button class="btn btn-primary" onclick="@AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add To Cart
            </button>
        </div>
    </div>
}


@code {
    private Product? product = null;
    private string message = string.Empty;

    private int currentTypeId = 1;
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        //nao vamos mais precisar dessa linhas
        // product = ProductService.Products.Find(p => p.Id == Id);

        message = "Loading product ...";
        var result = await ProductService.GetProduct(Id);

        if (!result.Success)
        {
            message = result.Message;
        }

        else
        {
            product = result.Data;
            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }
    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);

        return variant;
    }
    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem()
            {
                ProductId = productVariant.ProductId,
                ProducTypetId = productVariant.ProductTypeId
            };

        await CartService.AddToCart(cartItem);
    }

}